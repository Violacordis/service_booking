// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id            String                   @id @default(uuid()) @db.Uuid
  name          String                   @db.VarChar(255)
  code          String                   @unique
  description   String?                  @db.VarChar(255)
  status        Boolean                  @default(true)
  branchId      String                   @db.Uuid
  createdAt     DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt     DateTime                 @default(now()) @updatedAt @db.Timestamp(6)
  createdBy     String?                  @db.VarChar(255)
  updatedBy     String?                  @db.VarChar(255)
  categories    ServiceCategory[]
  appointments  AppointmentService[]

  branch        Branch                   @relation(fields: [branchId], references: [id])

  @@index([code])
  @@index([branchId])
  @@map("services")

}

model ServiceCategory {
  id            String                   @id @default(uuid()) @db.Uuid
  serviceId     String                   @db.Uuid
  name          String                   @db.VarChar(255)
  code          String                   @unique
  description   String?                  @db.VarChar(255)
  type          ServiceCategoryType      @default(BASIC)
  price         Float                    @default(0.0)
  estimatedTime Int?                     @db.Integer        // in minutes
  status        Boolean                  @default(true)
  createdAt     DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt     DateTime                 @default(now()) @updatedAt @db.Timestamp(6)
  createdBy     String?                  @db.VarChar(255)
  updatedBy     String?                  @db.VarChar(255)

  service       Service                  @relation(fields: [serviceId], references: [id])
  specialists   SpecialistCategory[]
  appointments  AppointmentServiceCategory[]

  @@index([code])
  @@map("service_categories")
}

enum ServiceCategoryType {
  BASIC
  STANDARD
  PREMIUM  
}


model Branch {
  id            String                   @id @default(uuid()) @db.Uuid
  name          String                   @db.VarChar(255)
  address       String?                  @db.VarChar(255)
  city          String?                  @db.VarChar(255)
  state         String?                  @db.VarChar(255)
  country       String?                  @db.VarChar(255)
  status        Boolean                  @default(true)
  createdAt     DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt     DateTime                 @default(now()) @updatedAt @db.Timestamp(6)
  createdBy     String?                  @db.VarChar(255)
  updatedBy     String?                  @db.VarChar(255)

  services      Service[]
  specialists   Specialist[]
  appointments  Appointment[]


  @@map("branches")
}

model Specialist {
  id            String                   @id @default(uuid()) @db.Uuid
  name          String                   @db.VarChar(255)
  email         String?                  @unique @db.VarChar(255)
  phone         String?                  @unique @db.VarChar(20)
  age           Int?
  branchId      String                   @db.Uuid
  address       String?                  @db.VarChar(255)
  city          String?                  @db.VarChar(255)
  state         String?                  @db.VarChar(255)
  country       String?                  @db.VarChar(255)
  description   String?                  @db.VarChar(255)
  status        Boolean                  @default(true)
  createdAt     DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt     DateTime                 @default(now()) @updatedAt @db.Timestamp(6)
  createdBy     String?                  @db.VarChar(255)
  updatedBy     String?                  @db.VarChar(255)

  branch        Branch                   @relation(fields: [branchId], references: [id])
  specialties   SpecialistCategory[]
  appointments  Appointment[]

 
  @@index([email])
  @@index([phone])
  @@map("specialists")
}


model SpecialistCategory {
  id                String           @id @default(uuid()) @db.Uuid
  specialistId      String           @db.Uuid
  categoryId        String           @db.Uuid
  createdAt         DateTime         @default(now()) @db.Timestamp(6)
  updatedAt         DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  specialist        Specialist      @relation(fields: [specialistId], references: [id])
  category          ServiceCategory  @relation(fields: [categoryId], references: [id])

  @@unique([specialistId, categoryId])
  @@map("specialist_categories")
}


model User {
  id            String                   @id @default(uuid()) @db.Uuid
  email         String                   @unique @db.VarChar(255)
  password      String                   @db.VarChar(255)    //optional for guests
  fullName      String                   @db.VarChar(255)
  address       String?                  @db.VarChar(255) 
  phone         String?                  @unique @db.VarChar(50)
  state         String?                  @db.VarChar(255)
  country       String?                  @db.VarChar(255)
  status        Boolean                  @default(true)
  createdAt     DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt     DateTime                 @default(now()) @updatedAt @db.Timestamp(6)

  appointments  Appointment[]

  @@index([email])
  @@map("users")
}

model Appointment {
  id               String                  @id @default(uuid()) @db.Uuid
  userId           String                  @db.Uuid
  specialistId     String                  @db.Uuid
  branchId         String                  @db.Uuid
  appointmentDate  DateTime                @db.Timestamp(6)
  type             AppointmentType         @default(PERSONAL)
  status           AppointmentStatus       @default(PENDING)
  totalCost        Float                   @default(0.0)
  currency         Currency                @default(usd)
  notes            String?                 @db.VarChar(255) 
  numberOfClients  Int?                    @default(1) // applicable for GROUP type
  services         AppointmentService[]
  createdAt        DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt        DateTime                 @default(now()) @updatedAt @db.Timestamp(6)

  user             User                     @relation(fields: [userId], references: [id])
  specialist       Specialist              @relation(fields: [specialistId], references: [id])
  branch           Branch                  @relation(fields: [branchId], references: [id])
  payment          Payment?


  @@index([appointmentDate])
  @@index([status])
  @@index([type])
  @@index([userId])
  @@index([specialistId])
  @@index([branchId])
  @@map("appointments")
}

enum Currency {
  usd
  eur
  gbp
  ngn
}

enum AppointmentType {
  PERSONAL
  GROUP
}

enum AppointmentStatus {
  PENDING
  PAID
  CANCELLED
  COMPLETED
}

model AppointmentService {
  id               String                         @id @default(uuid()) @db.Uuid
  appointmentId    String                         @db.Uuid
  serviceId        String                         @db.Uuid
  createdAt        DateTime                       @default(now()) @db.Timestamp(6)
  updatedAt        DateTime                       @default(now()) @updatedAt @db.Timestamp(6)
  service          Service                        @relation(fields: [serviceId], references: [id])
  appointment      Appointment                    @relation(fields: [appointmentId], references: [id])
  categories       AppointmentServiceCategory[]

  @@index([appointmentId])
  @@index([serviceId])
  @@map("appointment_services")

}

model AppointmentServiceCategory {
  id                   String                    @id @default(uuid()) @db.Uuid
  appointmentServiceId String                    @db.Uuid
  categoryId           String                    @db.Uuid
  createdAt            DateTime                  @default(now()) @db.Timestamp(6)
  updatedAt            DateTime                  @default(now()) @updatedAt @db.Timestamp(6)
  category             ServiceCategory           @relation(fields: [categoryId], references: [id])
  appointmentService   AppointmentService        @relation(fields: [appointmentServiceId], references: [id])

 @@index([appointmentServiceId])
  @@index([categoryId])
  @@map("appointment_service_categories")
}

model Payment {
  id            String                   @id @default(uuid()) @db.Uuid
  appointmentId String                   @db.Uuid @unique
  amount        Float                    @default(0.0)
  currency      String?                   
  status        PaymentStatus            @default(PENDING)
  intentId      String?                  @db.VarChar(255) 
  createdAt     DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt     DateTime                 @default(now()) @updatedAt @db.Timestamp(6)

  appointment   Appointment              @relation(fields: [appointmentId], references: [id])

  @@index([appointmentId])
  @@index([status])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}


